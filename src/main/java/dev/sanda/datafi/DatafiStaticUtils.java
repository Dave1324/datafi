package dev.sanda.datafi;

import com.google.common.collect.Sets;
import com.squareup.javapoet.ClassName;
import com.squareup.javapoet.JavaFile;
import com.squareup.javapoet.TypeName;
import com.squareup.javapoet.TypeSpec;
import dev.sanda.datafi.reflection.CachedEntityTypeInfo;
import dev.sanda.datafi.reflection.ReflectionCache;
import org.apache.commons.lang3.StringUtils;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;

import javax.annotation.processing.ProcessingEnvironment;
import javax.annotation.processing.RoundEnvironment;
import javax.lang.model.element.Element;
import javax.lang.model.element.ElementKind;
import javax.lang.model.element.TypeElement;
import javax.persistence.EmbeddedId;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Table;
import javax.tools.Diagnostic;
import java.io.IOException;
import java.time.LocalDateTime;
import java.util.*;
import java.util.stream.Collectors;

public class DatafiStaticUtils {
    public static String toPascalCase(String string){
        return string.substring(0, 1).toUpperCase() + string.substring(1);
    }
    public static String toCamelCase(String string){
        return string.substring(0, 1).toLowerCase() + string.substring(1);
    }
    public static String toPlural(String aString){
        String suffix = "";
        if(aString.endsWith("s")) suffix = "es";
        else if(aString.endsWith("y")) {
            aString = aString.substring(0, aString.length() - 1);
            suffix = "ies";
        } else suffix  ="s";
        return aString + suffix;
    }

    public static void logCompilationError(ProcessingEnvironment processingEnvironment, Element element, String message) {
        processingEnvironment
                .getMessager()
                .printMessage(Diagnostic.Kind.ERROR,
                        message + " --> " + element.getSimpleName().toString(), element);
    }

    public static void writeToJavaFile(String entitySimpleName,
                                       String packageName,
                                       TypeSpec.Builder builder,
                                       ProcessingEnvironment processingEnvironment,
                                       String templateType) {
        builder.addJavadoc(
                entitySimpleName +
                        " " + templateType + " generated by dev.sanda @" +
                        LocalDateTime.now());
        final TypeSpec newClass = builder.build();
        final JavaFile javaFile = JavaFile.builder(packageName, newClass).build();

        try {
            javaFile.writeTo(System.out);
            javaFile.writeTo(processingEnvironment.getFiler());
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    public static void throwEntityNotFoundException(String simpleName, Object id){
        throw new RuntimeException("Cannot find " + simpleName + " by id: " + id);
    }
    public static<T> List<Object> getIdList(Collection<T> input, ReflectionCache reflectionCache) {
        final String clazzName = input.iterator().next().getClass().getSimpleName();
        final CachedEntityTypeInfo cachedEntityTypeInfo = reflectionCache.getEntitiesCache().get(clazzName);
        List<Object> ids = new ArrayList<>();
        input.forEach(item -> ids.add(cachedEntityTypeInfo.getId(item)));
        return ids;
    }

    public static PageRequest generatePageRequest(int offset, int limit, String sortBy, Sort.Direction sortingDirection) {
        if (((limit - offset) <= 0) || limit < 0 || offset < 0) {
            throw new IllegalArgumentException("Invalid paging range");
        }
        if (sortBy != null) {
            return PageRequest.of(offset, limit, Sort.by(sortingDirection, sortBy));
        } else
            return PageRequest.of(offset, limit);
    }

    public static void validateSortByIfNonNull(Class<?> clazz, String sortByFieldName, ReflectionCache reflectionCache){
        if(sortByFieldName == null) return;
        CachedEntityTypeInfo entityTypeInfo = reflectionCache.getEntitiesCache().get(clazz.getSimpleName());
        if(entityTypeInfo.getFields().get(sortByFieldName) == null)
            throw new IllegalArgumentException(
                    "Cannot sort by "+ sortByFieldName +" as there is no such field in " + clazz.getName());
    }

    public static String firstLowerCaseLetterOf(String str){
        return str.substring(0, 1).toLowerCase();
    }

    /**
     * In order to generate a JpaRepository<T, ID>, we need the ID id type a given entity
     * @param entity
     * @return
     */
    public static ClassName getIdType(TypeElement entity, ProcessingEnvironment processingEnv) {
        for(Element field : entity.getEnclosedElements()){
            if(field.getKind() == ElementKind.FIELD &&
                    (
                            field.getAnnotation(Id.class) != null || field.getAnnotation(EmbeddedId.class) != null
                    )){
                return (ClassName) ClassName.get(field.asType());
            }
        }
        processingEnv
                .getMessager()
                .printMessage(Diagnostic.Kind.ERROR,
                        "No id type found for entity " + entity.getSimpleName().toString(), entity);
        return null;
    }

    public static String getBasePackage(RoundEnvironment roundEnvironment) {
        String commonPrefix = StringUtils.getCommonPrefix(getRootElementNames(roundEnvironment));
        return commonPrefix.substring(0, commonPrefix.lastIndexOf("."));
    }

    public static String[] getRootElementNames(RoundEnvironment roundEnvironment) {
        return roundEnvironment
                .getRootElements()
                .stream()
                .map(el -> el.asType().toString())
                .toArray(String[]::new);
    }

    @SuppressWarnings("unchecked")
    public static Set<? extends TypeElement> getEntitiesSet(RoundEnvironment roundEnvironment) {
        Set<TypeElement> entities = new HashSet<>();
        entities.addAll((Collection<? extends TypeElement>) roundEnvironment.getElementsAnnotatedWith(Entity.class));
        entities.addAll((Collection<? extends TypeElement>) roundEnvironment.getElementsAnnotatedWith(Table.class));
        return Sets.newHashSet(entities);
    }

    public static String camelCaseNameOf(Element element) {
        return toCamelCase(element.getSimpleName().toString());
    }

    public static Map<TypeElement, Map<String, TypeName>> getEntitiesFieldsMap(Set<? extends TypeElement> entities) {
        Map<TypeElement, Map<String, TypeName>> result = new HashMap<>();
        for (TypeElement entity : entities) {
            Map<String, TypeName> entityFieldsMap = new HashMap<>();
            final Set<? extends Element> fields =
                    entity.getEnclosedElements().stream().filter(e -> e.getKind().isField()).collect(Collectors.toSet());
            for(Element field : fields){
                entityFieldsMap.put(field.getSimpleName().toString(), TypeName.get(field.asType()));
            }
            result.put(entity, entityFieldsMap);
        }
        return result;
    }
}
